2. Add Two Numbers            //LinkList
==========================================================================================
You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
==========================================================================================
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *Head = new ListNode(0) ;
        ListNode* pList = Head , *p = l1 ,*q = l2;
        int c = 0;
        while( p!=NULL || q!=NULL ) {
            int sum = 0;
            sum = (p?p->val:0) +(q?q->val:0) + c ;
            c = sum / 10 ;
            pList->next = new ListNode(sum%10) ;
            pList = pList->next ;
            q = q?q->next:q ;
            p = p?p->next:p ;
        }
        if(c) {
             pList->next = new ListNode(1) ;
        }
      
        return Head->next ;
    }
};
============================================================================================

