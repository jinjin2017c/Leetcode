121. Best Time to Buy and Sell Stock
============================================
Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.

Example 1:
Input: [7, 1, 5, 3, 6, 4]
Output: 5

max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)
Example 2:
Input: [7, 6, 4, 3, 1]
Output: 0

In this case, no transaction is done, i.e. max profit = 0.
============================================
class Solution {
public:
    //本题关键在于将每一个最小值的出现作为一个新的起点开始计算
    //前一阶段只保留最大利润
    //初始的想法是分两种情况，全局找到最大值最小值，最小值后面找最大，最大前面找最小
    //两种情况的之中的最大值为答案
    //显然时间复杂度落后太多
    //minprice初始值设为price[0]会在输入空数组时出错
    //故改为用INT_MAX来初始化
    int maxProfit(vector<int>& prices) {
        int minprice = INT_MAX;             //显示目前为止最低价
        int maxprofit = 0;                    //显示目前的最大利润
        for(int i = 0; i < prices.size(); i++)
        {
            if(minprice > prices[i])
            {
                minprice = prices[i];
            }
            else
            {
                if(prices[i] - minprice > maxprofit)
                {
                    maxprofit = prices[i] - minprice;
                }
            }
        }
        return maxprofit;
    }
};
============================================
