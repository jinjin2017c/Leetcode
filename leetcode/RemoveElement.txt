27. Remove Element
===============================================
Given an array and a value, remove all instances of that value in-place and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

The order of elements can be changed. It doesn't matter what you leave beyond the new length.

Example:

Given nums = [3,2,2,3], val = 3,

Your function should return length = 2, with the first two elements of nums being 2.

===============================================
class Solution {
public:
    //输出一个值之后他还会检查你数组正确的项
    //必须实现数组的改变
    //用双指针在原数组上操作
    int removeElement(vector<int>& nums, int val) {
      /*  int numbers = 0;
        int j = 0;
        for(int i = 0 ; i < nums.size() ; i++)
        {
            if(nums[i] != val){
                nums[j] = nums[i];
                j++;
            }
        }
        return j;*/
    //如果与val相等的数are rare
    //可采用下面的代码减少赋值操作
    //外循环次数仍为n
        int i = 0;
        int n = nums.size()-1;
        while(i <= n)                  //两个相等时仍需判定一次
        {
            if(nums[i] == val)
            {
                nums[i] = nums[n];
                //指针前移一位
                n--;
            }
            else
            {
                i++;
            }
        }
        return i;                //此时i = n + 1; n为有效数组最后一位的下标
    }
};
==========================================================