118. Pascal's Triangle
============================================================
Given numRows, generate the first numRows of Pascal's triangle.

For example, given numRows = 5,
Return

[
     [1],
    [1,1],
   [1,2,1],
  [1,3,3,1],
 [1,4,6,4,1]
]
=============================================================
class Solution {
public:
    //解决本题时想到了一个问题
    //C中的二维数组是存在一个连续的内存，所以初始化时必须明确列数以求出地址
    //C++中的vector是通过两次寻址来实现的
    //两者的原理不同
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> res(numRows);
        if(numRows == 0)              //输入为0返回空数组,若不想单独判断，可采用下述resize(i+1)
        {
            return res;
        }
        res[0].push_back(1);                       //此处采用vector.push_back()
        for(int i = 1; i < numRows; i++)           //除第一行收尾都要用一次，故将第一行放在循环外避免使用if
            {                                      //采用vector.resize(i+1),可将第一行放在循环内，因为结尾和开头指数已知可直接赋值
                res[i].push_back(1);               
                for(int j = 1; j < i ; j++)
                {
                   res[i].push_back(res[i-1][j]+res[i-1][j-1]);        //It's obviously done in this way!
                }
                res[i].push_back(1);              //Don't forget to add the last member.
            }
        return res;
    }
};
//下述代码可更深刻的理解push_back的用法
/*
class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>>ret;
        for(int i=0;i<numRows;i++){
            ret.push_back(vector<int>(i+1,0));
            for(int j=0;j<=i;j++){
                if(j==0||j==i){
                    ret[i][j]=1;
                }else{
                    ret[i][j]=ret[i-1][j-1]+ret[i-1][j];
                }
            }
        }
        return ret;
    }
};
*/
===============================================================